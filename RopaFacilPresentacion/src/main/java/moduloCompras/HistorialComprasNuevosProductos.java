package moduloCompras;

import com.github.lgooddatepicker.components.DatePicker;
import com.github.lgooddatepicker.zinternaltools.DateChangeEvent;
import control.ControlFlujo;
import control.ControlOperaciones;
import dtos.DetalleCompraTallaDTO;
import dtos.NuevoProductoDTO;
import exception.NegocioException;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author PC WHITE WOLF
 */
public class HistorialComprasNuevosProductos extends javax.swing.JPanel {
    
    private static HistorialComprasNuevosProductos instance;
    
    private boolean campoValido;
    private boolean filtroValido;
    private boolean fechaInicioValida;
    private boolean fechaFinalValida;
    
    private final DefaultTableModel modeloTablaProductos;
    private final DefaultTableModel modeloTablaTallas;
    private List<NuevoProductoDTO> comprasEncontradas;
    /**
     * Constructor por defecto.
     */
    private HistorialComprasNuevosProductos() {
        initComponents();
        jLBuscador.setVisible(false);
        jTFBuscador.setVisible(false);
        jLFechaInicio.setVisible(false);
        jLFechaFinal.setVisible(false);
        jDCFechaInicio.setVisible(false);
        jDCFechaFinal.setVisible(false);
        jTallasCompradas.setVisible(false);
        
        comprasEncontradas = new ArrayList<>();
        
        modeloTablaProductos = (DefaultTableModel) jTProductos.getModel();
        modeloTablaProductos.setRowCount(0);
        jTProductos.setModel(modeloTablaProductos);
        
        modeloTablaTallas = (DefaultTableModel) jTallasCompradas.getModel();
        modeloTablaTallas.setRowCount(0);
        jTallasCompradas.setModel(modeloTablaTallas);
        
        ControlOperaciones.configurarCamposTexto(jTFBuscador);
        
        activarListenerFechas(jDCFechaInicio);
        activarListenerFechas(jDCFechaFinal);
    }
    
    public static HistorialComprasNuevosProductos getInstance(){
        if(instance == null)
            instance = new HistorialComprasNuevosProductos();
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLTítuloNuevoProducto = new javax.swing.JLabel();
        btnRegresar = new javax.swing.JButton();
        jTFBuscador = new javax.swing.JTextField();
        jLBuscador = new javax.swing.JLabel();
        jCBFiltro = new javax.swing.JComboBox<>();
        jLFiltroBusqueda = new javax.swing.JLabel();
        jDCFechaInicio = new com.github.lgooddatepicker.components.DatePicker();
        jLFechaInicio = new javax.swing.JLabel();
        jLFechaFinal = new javax.swing.JLabel();
        jDCFechaFinal = new com.github.lgooddatepicker.components.DatePicker();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTProductos = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTallasCompradas = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(0, 0, 0));
        setMaximumSize(new java.awt.Dimension(1280, 720));
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setPreferredSize(new java.awt.Dimension(1280, 720));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLTítuloNuevoProducto.setBackground(new java.awt.Color(255, 255, 255));
        jLTítuloNuevoProducto.setFont(new java.awt.Font("Century Gothic", 1, 72)); // NOI18N
        jLTítuloNuevoProducto.setForeground(new java.awt.Color(0, 0, 0));
        jLTítuloNuevoProducto.setText("Historial Nuevos Productos");
        add(jLTítuloNuevoProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(172, 0, -1, -1));

        btnRegresar.setBackground(new java.awt.Color(0, 0, 0));
        btnRegresar.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        btnRegresar.setForeground(new java.awt.Color(255, 255, 255));
        btnRegresar.setText("Regresar");
        btnRegresar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 0, true));
        btnRegresar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRegresar.setFocusPainted(false);
        btnRegresar.setFocusable(false);
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });
        add(btnRegresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(49, 604, 145, 48));
        btnRegresar.setBorderPainted(false);
        btnRegresar.setContentAreaFilled(false);
        btnRegresar.setOpaque(false);
        btnRegresar.setUI(new javax.swing.plaf.basic.BasicButtonUI() {
            @Override
            public void paint(Graphics g, JComponent c) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                // Pinta un fondo redondeado
                g2.setColor(c.getBackground());
                g2.fillRoundRect(0, 0, c.getWidth(), c.getHeight(), 20, 20);
                super.paint(g2, c);
                g2.dispose();
            }
        });

        jTFBuscador.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jTFBuscador.setBackground(new java.awt.Color(255, 255, 255));
        jTFBuscador.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jTFBuscador.setForeground(new java.awt.Color(0, 0, 0));
        jTFBuscador.setMaximumSize(new java.awt.Dimension(64, 21));
        add(jTFBuscador, new org.netbeans.lib.awtextra.AbsoluteConstraints(646, 158, 601, 33));

        jLBuscador.setText("Nombre del producto:");
        jLBuscador.setBackground(new java.awt.Color(255, 255, 255));
        jLBuscador.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLBuscador.setForeground(new java.awt.Color(0, 0, 0));
        add(jLBuscador, new org.netbeans.lib.awtextra.AbsoluteConstraints(646, 118, 268, 28));

        jCBFiltro.setBackground(new java.awt.Color(255, 255, 255));
        jCBFiltro.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jCBFiltro.setForeground(new java.awt.Color(0, 0, 0));
        jCBFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "N/A", "Nombre", "Fecha", "Proveedor" }));
        jCBFiltro.setBorder(null);
        jCBFiltro.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCBFiltro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBFiltroItemStateChanged(evt);
            }
        });
        add(jCBFiltro, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, 117, -1));

        jLFiltroBusqueda.setBackground(new java.awt.Color(255, 255, 255));
        jLFiltroBusqueda.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLFiltroBusqueda.setForeground(new java.awt.Color(0, 0, 0));
        jLFiltroBusqueda.setText("Filtro de búsqueda:");
        add(jLFiltroBusqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, -1, 28));

        jDCFechaInicio.setBackground(new java.awt.Color(255, 255, 255));
        jDCFechaInicio.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jDCFechaInicio.setForeground(new java.awt.Color(0, 0, 0));
        jDCFechaInicio.setMaximumSize(new java.awt.Dimension(143, 21));
        add(jDCFechaInicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(249, 158, -1, 33));

        jLFechaInicio.setBackground(new java.awt.Color(255, 255, 255));
        jLFechaInicio.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLFechaInicio.setForeground(new java.awt.Color(0, 0, 0));
        jLFechaInicio.setText("Fecha inicio:");
        add(jLFechaInicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(249, 118, -1, 28));

        jLFechaFinal.setBackground(new java.awt.Color(255, 255, 255));
        jLFechaFinal.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLFechaFinal.setForeground(new java.awt.Color(0, 0, 0));
        jLFechaFinal.setText("Fecha final:");
        add(jLFechaFinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(432, 118, -1, 28));

        jDCFechaFinal.setBackground(new java.awt.Color(255, 255, 255));
        jDCFechaFinal.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jDCFechaFinal.setForeground(new java.awt.Color(0, 0, 0));
        jDCFechaFinal.setMaximumSize(new java.awt.Dimension(143, 21));
        add(jDCFechaFinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(432, 158, -1, 33));

        jTProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Tipo", "Categoria", "Color", "Precio Unitario", "Precio Venta Sugerido", "Total", "Fecha y hora", "Proveedor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTProductos.setBackground(new java.awt.Color(255, 255, 255));
        jTProductos.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jTProductos.setForeground(new java.awt.Color(0, 0, 0));
        jTProductos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jTProductos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTProductos.getTableHeader().setResizingAllowed(false);
        jTProductos.getTableHeader().setReorderingAllowed(false);
        jTProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTProductosMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTProductos);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, 1050, 340));

        jTallasCompradas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Talla", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTallasCompradas.setBackground(new java.awt.Color(255, 255, 255));
        jTallasCompradas.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jTallasCompradas.setForeground(new java.awt.Color(0, 0, 0));
        jTallasCompradas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jTallasCompradas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTallasCompradas.getTableHeader().setResizingAllowed(false);
        jTallasCompradas.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTallasCompradas);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 210, 150, 220));
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        jCBFiltro.setSelectedItem("N/A");
        jTFBuscador.setText("");
        modeloTablaProductos.setRowCount(0);
        modeloTablaTallas.setRowCount(0);
        ControlFlujo.mostrarHistorialCompras();
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void jCBFiltroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBFiltroItemStateChanged
        if(ControlOperaciones.validarCampoInvalidoComboBox(jCBFiltro)){
            if(jCBFiltro.getSelectedItem().equals("Nombre")){
                filtrarBuscador("Nombre del producto");
                ControlOperaciones.limiteCaracteres(jTFBuscador, 100);
                activarBuscador();
                
            } else if(jCBFiltro.getSelectedItem().equals("Fecha")){
                if(jLBuscador.isVisible())
                    jLBuscador.setVisible(false);

                if(jTFBuscador.isVisible())
                    jTFBuscador.setVisible(false);
                
                if(!jLFechaInicio.isVisible())
                    jLFechaInicio.setVisible(true);
                
                if(!jLFechaFinal.isVisible())
                    jLFechaFinal.setVisible(true);
                
                if(!jDCFechaInicio.isVisible())
                    jDCFechaInicio.setVisible(true);

                if(!jDCFechaFinal.isVisible())
                    jDCFechaFinal.setVisible(true);

                modeloTablaProductos.setRowCount(0);
                modeloTablaTallas.setRowCount(0);
                activarBuscador();
                
            } else if(jCBFiltro.getSelectedItem().equals("Proveedor")){
                filtrarBuscador("Proveedor del producto");
                ControlOperaciones.limiteCaracteres(jTFBuscador, 100);
                activarBuscador();
                
            }
            
        } else{
            
            if(jLFechaInicio.isVisible())
                jLFechaInicio.setVisible(false);

            if(jLFechaFinal.isVisible())
                jLFechaFinal.setVisible(false);

            if(jDCFechaInicio.isVisible())
                jDCFechaInicio.setVisible(false);

            if(jDCFechaFinal.isVisible())
                jDCFechaFinal.setVisible(false);
            
            if(jLBuscador.isVisible())
                jLBuscador.setVisible(false);

            if(jTFBuscador.isVisible())
                jTFBuscador.setVisible(false);
            
            modeloTablaProductos.setRowCount(0);
            modeloTablaTallas.setRowCount(0);
        }
    }//GEN-LAST:event_jCBFiltroItemStateChanged

    private void jTProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTProductosMouseClicked
        filtroValido = ControlOperaciones.validarCampoInvalidoComboBox(jCBFiltro);
        if(filtroValido && jTProductos.getSelectedRow() != -1){
            modeloTablaTallas.setRowCount(0);
            cargarTablaTallas();
        }
    }//GEN-LAST:event_jTProductosMouseClicked

    private void activarBuscador(){
        jTFBuscador.getDocument().addDocumentListener( new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                try {
                    tablaDinamica();
                } catch (NegocioException ex) {
                    JOptionPane.showMessageDialog(HistorialComprasNuevosProductos.getInstance(), ex.getMessage(), "Error de búsqueda", JOptionPane.ERROR_MESSAGE);
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                try {
                    tablaDinamica();
                } catch (NegocioException ex) {
                    JOptionPane.showMessageDialog(HistorialComprasNuevosProductos.getInstance(), ex.getMessage(), "Error de búsqueda", JOptionPane.ERROR_MESSAGE);
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                try {
                    tablaDinamica();
                } catch (NegocioException ex) {
                    JOptionPane.showMessageDialog(HistorialComprasNuevosProductos.getInstance(), ex.getMessage(), "Error de búsqueda", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }
    
    private void activarListenerFechas(DatePicker picker){
        picker.addDateChangeListener((DateChangeEvent event) -> {
            fechaInicioValida = ControlOperaciones.validarFechaInvalida(jDCFechaInicio);
            fechaFinalValida = ControlOperaciones.validarFechaInvalida(jDCFechaFinal);
            if(fechaInicioValida && fechaFinalValida){
                try {
                    comprasEncontradas = ControlOperaciones.buscarNuevosProductosFecha(jDCFechaInicio.getDate(), jDCFechaFinal.getDate());
                    cargarTablaCompras();
                } catch (NegocioException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error de búsqueda", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }
    
    private void tablaDinamica() throws NegocioException{
        campoValido = ControlOperaciones.validarCampoInvalidoTexto(jTFBuscador);
        filtroValido = ControlOperaciones.validarCampoInvalidoComboBox(jCBFiltro);
        
        if(campoValido && filtroValido){
            modeloTablaProductos.setRowCount(0);
            modeloTablaTallas.setRowCount(0);
            if(jCBFiltro.getSelectedItem().equals("Nombre")){
                comprasEncontradas = ControlOperaciones.buscarNuevosProductosNombre(jTFBuscador.getText());
                cargarTablaCompras();
            } else if (jCBFiltro.getSelectedItem().equals("Proveedor")){
                comprasEncontradas = ControlOperaciones.buscarNuevosProductosProveedor(jTFBuscador.getText());
                cargarTablaCompras();
            }
        }
        
    }
    
    private void cargarTablaCompras(){
        if(!comprasEncontradas.isEmpty()){
            for(NuevoProductoDTO e : comprasEncontradas){
                String proveedor = "N/A";
                if(e.getProductoComprado().getProveedor() != null)
                    proveedor = e.getProductoComprado().getProveedor().getProveedor();
                    
                modeloTablaProductos.addRow(new Object[]{
                    e.getProductoComprado().getNombre(),
                    e.getProductoComprado().getTipo().getTipo(),
                    e.getProductoComprado().getCategoria().getCategoria(),
                    e.getProductoComprado().getColor().getColor(),
                    e.getPrecioCompraUnitario(),
                    e.getPrecioVentaSugerido(),
                    e.getTotalCompra(),
                    e.getFechaHora().toString(),
                    proveedor
                });
            }
        }
    }
    
    private void cargarTablaTallas(){
        if(!comprasEncontradas.isEmpty()){
            List<DetalleCompraTallaDTO> tallas = comprasEncontradas.get(jTProductos.getSelectedRow()).getTallasCompradas();
            jTallasCompradas.setVisible(true);
            for(DetalleCompraTallaDTO talla : tallas){
                modeloTablaTallas.addRow(new Object[]{talla.getTalla().getTalla(), talla.getCantidadComprada()});
            }
        }
    }
    
    private void filtrarBuscador(String nuevoTítulo){
        
        if(jLFechaInicio.isVisible())
            jLFechaInicio.setVisible(false);

        if(jLFechaFinal.isVisible())
            jLFechaFinal.setVisible(false);
        
        if(jDCFechaInicio.isVisible())
            jDCFechaInicio.setVisible(false);
        
        if(jDCFechaFinal.isVisible())
            jDCFechaFinal.setVisible(false);
        
        if(!jLBuscador.isVisible())
            jLBuscador.setVisible(true);
        
        if(!jTFBuscador.isVisible())
            jTFBuscador.setVisible(true);
        
        jLBuscador.setText(nuevoTítulo);
        jTFBuscador.setText("");
        modeloTablaProductos.setRowCount(0);
        modeloTablaTallas.setRowCount(0);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegresar;
    private javax.swing.JComboBox<String> jCBFiltro;
    private com.github.lgooddatepicker.components.DatePicker jDCFechaFinal;
    private com.github.lgooddatepicker.components.DatePicker jDCFechaInicio;
    private javax.swing.JLabel jLBuscador;
    private javax.swing.JLabel jLFechaFinal;
    private javax.swing.JLabel jLFechaInicio;
    private javax.swing.JLabel jLFiltroBusqueda;
    private javax.swing.JLabel jLTítuloNuevoProducto;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTFBuscador;
    private javax.swing.JTable jTProductos;
    private javax.swing.JTable jTallasCompradas;
    // End of variables declaration//GEN-END:variables
}