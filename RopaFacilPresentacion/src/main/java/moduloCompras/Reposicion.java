package moduloCompras;

import control.ControlFlujo;
import control.ControlOperaciones;
import dtos.DetalleCompraTallaDTO;
import dtos.ProductoDTO;
import dtos.ReposicionDTO;
import dtos.TallaDTO;
import exception.NegocioException;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author PC WHITE WOLF
 */
public class Reposicion extends javax.swing.JPanel {
    
    private static Reposicion instance;
    
    private boolean campoValido;
    private boolean filtroValido;
    private boolean categoriaValida;
    private boolean XSValido;
    private boolean SValido;
    private boolean MValido;
    private boolean LValido;
    private boolean XLValido;
    private boolean precioUnitarioValido;
    private final DefaultTableModel modeloTablaProductos;
    private List<ProductoDTO> productosEncontrados;
    /**
     * Constructor por defecto.
     */
    private Reposicion() {
        initComponents();
        btnConfirmarReposicion.setVisible(false);
        jLBuscador.setVisible(false);
        jTFBuscador.setVisible(false);
        jLFiltroCategoria.setVisible(false);
        jCBCategoria.setVisible(false);
        mostrarTallas(false);
        productosEncontrados = new ArrayList<>();
        
        jTFTallaXSInput.setVisible(false);
        jTFTallaSInput.setVisible(false);
        jTFTallaMInput.setVisible(false);
        jTFTallaLInput.setVisible(false);
        jTFTallaXLInput.setVisible(false);
        jLPrecioCompraUnitario.setVisible(false);
        jTFPrecioCompraUnitario.setVisible(false);
        
        modeloTablaProductos = (DefaultTableModel) jTProductos.getModel();
        modeloTablaProductos.setRowCount(0);
        jTProductos.setModel(modeloTablaProductos);
        
        ControlOperaciones.configurarCamposTexto(jTFBuscador);
        
        ControlOperaciones.limiteCaracteres(jTFTallaXSInput, 5);
        ControlOperaciones.limiteCaracteres(jTFTallaSInput, 5);
        ControlOperaciones.limiteCaracteres(jTFTallaMInput, 5);
        ControlOperaciones.limiteCaracteres(jTFTallaLInput, 5);
        ControlOperaciones.limiteCaracteres(jTFTallaXLInput, 5);
        ControlOperaciones.limiteCaracteres(jTFPrecioCompraUnitario, 20);
        
        ControlOperaciones.configurarCamposCantidades(jTFTallaXSInput);
        ControlOperaciones.configurarCamposCantidades(jTFTallaSInput);
        ControlOperaciones.configurarCamposCantidades(jTFTallaMInput);
        ControlOperaciones.configurarCamposCantidades(jTFTallaLInput);
        ControlOperaciones.configurarCamposCantidades(jTFTallaXLInput);
        ControlOperaciones.configurarCamposPrecios(jTFPrecioCompraUnitario);
        
        activarBotonConfirmarReposicion(jTFTallaXSInput);
        activarBotonConfirmarReposicion(jTFTallaSInput);
        activarBotonConfirmarReposicion(jTFTallaMInput);
        activarBotonConfirmarReposicion(jTFTallaLInput);
        activarBotonConfirmarReposicion(jTFTallaXLInput);
        activarBotonConfirmarReposicion(jTFPrecioCompraUnitario);
    }
    
    public static Reposicion getInstance(){
        if(instance == null)
            instance = new Reposicion();
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLTítuloNuevoProducto = new javax.swing.JLabel();
        btnRegresar = new javax.swing.JButton();
        jTFBuscador = new javax.swing.JTextField();
        jLBuscador = new javax.swing.JLabel();
        jLFiltroCategoria = new javax.swing.JLabel();
        jCBFiltro = new javax.swing.JComboBox<>();
        btnConfirmarReposicion = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTProductos = new javax.swing.JTable();
        jCBCategoria = new javax.swing.JComboBox<>();
        jLFiltroBusqueda = new javax.swing.JLabel();
        jLTallaL = new javax.swing.JLabel();
        jLTallaXL = new javax.swing.JLabel();
        jLTalla = new javax.swing.JLabel();
        jTFTallaXSInput = new javax.swing.JTextField();
        jTFTallaSInput = new javax.swing.JTextField();
        jTFTallaMInput = new javax.swing.JTextField();
        jTFTallaLInput = new javax.swing.JTextField();
        jTFTallaXLInput = new javax.swing.JTextField();
        jLCantidad = new javax.swing.JLabel();
        jLTallaS = new javax.swing.JLabel();
        jLTallaXS = new javax.swing.JLabel();
        jLTallaM = new javax.swing.JLabel();
        jLPrecioCompraUnitario = new javax.swing.JLabel();
        jTFPrecioCompraUnitario = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(0, 0, 0));
        setMaximumSize(new java.awt.Dimension(1280, 720));
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setPreferredSize(new java.awt.Dimension(1280, 720));

        jLTítuloNuevoProducto.setBackground(new java.awt.Color(255, 255, 255));
        jLTítuloNuevoProducto.setFont(new java.awt.Font("Century Gothic", 1, 72)); // NOI18N
        jLTítuloNuevoProducto.setForeground(new java.awt.Color(0, 0, 0));
        jLTítuloNuevoProducto.setText("Reposición");

        btnRegresar.setBackground(new java.awt.Color(0, 0, 0));
        btnRegresar.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        btnRegresar.setForeground(new java.awt.Color(255, 255, 255));
        btnRegresar.setText("Regresar");
        btnRegresar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 0, true));
        btnRegresar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRegresar.setFocusPainted(false);
        btnRegresar.setFocusable(false);
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        jTFBuscador.setBackground(new java.awt.Color(255, 255, 255));
        jTFBuscador.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jTFBuscador.setForeground(new java.awt.Color(0, 0, 0));
        jTFBuscador.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jTFBuscador.setMaximumSize(new java.awt.Dimension(64, 21));

        jLBuscador.setBackground(new java.awt.Color(255, 255, 255));
        jLBuscador.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLBuscador.setForeground(new java.awt.Color(0, 0, 0));
        jLBuscador.setText("Nombre del producto:");

        jLFiltroCategoria.setBackground(new java.awt.Color(255, 255, 255));
        jLFiltroCategoria.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLFiltroCategoria.setForeground(new java.awt.Color(0, 0, 0));
        jLFiltroCategoria.setText("Categoría:");

        jCBFiltro.setBackground(new java.awt.Color(255, 255, 255));
        jCBFiltro.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jCBFiltro.setForeground(new java.awt.Color(0, 0, 0));
        jCBFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "N/A", "Nombre", "Tipo", "Categoría", "Color", "Talla" }));
        jCBFiltro.setBorder(null);
        jCBFiltro.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCBFiltro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBFiltroItemStateChanged(evt);
            }
        });

        btnConfirmarReposicion.setBackground(new java.awt.Color(0, 0, 0));
        btnConfirmarReposicion.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        btnConfirmarReposicion.setForeground(new java.awt.Color(255, 255, 255));
        btnConfirmarReposicion.setText("Confirmar reposición");
        btnConfirmarReposicion.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 0, true));
        btnConfirmarReposicion.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnConfirmarReposicion.setFocusPainted(false);
        btnConfirmarReposicion.setFocusable(false);
        btnConfirmarReposicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarReposicionActionPerformed(evt);
            }
        });

        jTProductos.setBackground(new java.awt.Color(255, 255, 255));
        jTProductos.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jTProductos.setForeground(new java.awt.Color(0, 0, 0));
        jTProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Tipo", "Categoría", "Color", "Precio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTProductos.setMaximumSize(new java.awt.Dimension(375, 0));
        jTProductos.setMinimumSize(new java.awt.Dimension(375, 0));
        jTProductos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTProductos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTProductos.getTableHeader().setResizingAllowed(false);
        jTProductos.getTableHeader().setReorderingAllowed(false);
        jTProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTProductosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTProductos);

        jCBCategoria.setBackground(new java.awt.Color(255, 255, 255));
        jCBCategoria.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jCBCategoria.setForeground(new java.awt.Color(0, 0, 0));
        jCBCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "N/A", "DAMA", "CABALLERO" }));
        jCBCategoria.setBorder(null);
        jCBCategoria.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCBCategoria.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBCategoriaItemStateChanged(evt);
            }
        });

        jLFiltroBusqueda.setBackground(new java.awt.Color(255, 255, 255));
        jLFiltroBusqueda.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLFiltroBusqueda.setForeground(new java.awt.Color(0, 0, 0));
        jLFiltroBusqueda.setText("Filtro de búsqueda:");

        jLTallaL.setBackground(new java.awt.Color(255, 255, 255));
        jLTallaL.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLTallaL.setForeground(new java.awt.Color(0, 0, 0));
        jLTallaL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLTallaL.setText("L");
        jLTallaL.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLTallaXL.setBackground(new java.awt.Color(255, 255, 255));
        jLTallaXL.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLTallaXL.setForeground(new java.awt.Color(0, 0, 0));
        jLTallaXL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLTallaXL.setText("XL");
        jLTallaXL.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLTalla.setBackground(new java.awt.Color(255, 255, 255));
        jLTalla.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLTalla.setForeground(new java.awt.Color(0, 0, 0));
        jLTalla.setText("Talla:");

        jTFTallaXSInput.setBackground(new java.awt.Color(255, 255, 255));
        jTFTallaXSInput.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jTFTallaXSInput.setForeground(new java.awt.Color(0, 0, 0));
        jTFTallaXSInput.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFTallaXSInput.setText("0");
        jTFTallaXSInput.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jTFTallaXSInput.setMinimumSize(new java.awt.Dimension(64, 23));
        jTFTallaXSInput.setPreferredSize(new java.awt.Dimension(64, 23));

        jTFTallaSInput.setBackground(new java.awt.Color(255, 255, 255));
        jTFTallaSInput.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jTFTallaSInput.setForeground(new java.awt.Color(0, 0, 0));
        jTFTallaSInput.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFTallaSInput.setText("0");
        jTFTallaSInput.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jTFTallaSInput.setMinimumSize(new java.awt.Dimension(64, 23));
        jTFTallaSInput.setPreferredSize(new java.awt.Dimension(64, 23));

        jTFTallaMInput.setBackground(new java.awt.Color(255, 255, 255));
        jTFTallaMInput.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jTFTallaMInput.setForeground(new java.awt.Color(0, 0, 0));
        jTFTallaMInput.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFTallaMInput.setText("0");
        jTFTallaMInput.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jTFTallaMInput.setMinimumSize(new java.awt.Dimension(64, 23));
        jTFTallaMInput.setPreferredSize(new java.awt.Dimension(64, 23));

        jTFTallaLInput.setBackground(new java.awt.Color(255, 255, 255));
        jTFTallaLInput.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jTFTallaLInput.setForeground(new java.awt.Color(0, 0, 0));
        jTFTallaLInput.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFTallaLInput.setText("0");
        jTFTallaLInput.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jTFTallaLInput.setMinimumSize(new java.awt.Dimension(64, 23));
        jTFTallaLInput.setPreferredSize(new java.awt.Dimension(64, 23));

        jTFTallaXLInput.setBackground(new java.awt.Color(255, 255, 255));
        jTFTallaXLInput.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jTFTallaXLInput.setForeground(new java.awt.Color(0, 0, 0));
        jTFTallaXLInput.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTFTallaXLInput.setText("0");
        jTFTallaXLInput.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jTFTallaXLInput.setMinimumSize(new java.awt.Dimension(64, 23));
        jTFTallaXLInput.setPreferredSize(new java.awt.Dimension(64, 23));

        jLCantidad.setBackground(new java.awt.Color(255, 255, 255));
        jLCantidad.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLCantidad.setForeground(new java.awt.Color(0, 0, 0));
        jLCantidad.setText("Cantidad:");

        jLTallaS.setBackground(new java.awt.Color(255, 255, 255));
        jLTallaS.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLTallaS.setForeground(new java.awt.Color(0, 0, 0));
        jLTallaS.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLTallaS.setText("S");
        jLTallaS.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLTallaXS.setBackground(new java.awt.Color(255, 255, 255));
        jLTallaXS.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLTallaXS.setForeground(new java.awt.Color(0, 0, 0));
        jLTallaXS.setText("XS");

        jLTallaM.setBackground(new java.awt.Color(255, 255, 255));
        jLTallaM.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLTallaM.setForeground(new java.awt.Color(0, 0, 0));
        jLTallaM.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLTallaM.setText("M");
        jLTallaM.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLPrecioCompraUnitario.setBackground(new java.awt.Color(255, 255, 255));
        jLPrecioCompraUnitario.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLPrecioCompraUnitario.setForeground(new java.awt.Color(0, 0, 0));
        jLPrecioCompraUnitario.setText("Precio de compra unitario*:");

        jTFPrecioCompraUnitario.setBackground(new java.awt.Color(255, 255, 255));
        jTFPrecioCompraUnitario.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jTFPrecioCompraUnitario.setForeground(new java.awt.Color(0, 0, 0));
        jTFPrecioCompraUnitario.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLTítuloNuevoProducto)
                .addGap(418, 418, 418))
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnConfirmarReposicion, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCBFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLFiltroBusqueda))
                                .addGap(62, 62, 62)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCBCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLFiltroCategoria))
                                .addGap(84, 84, 84)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLBuscador, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTFBuscador, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 882, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLTalla)
                                        .addGap(33, 33, 33)
                                        .addComponent(jLCantidad))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLTallaS, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLTallaXS, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLTallaM, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLTallaXL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLTallaL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(57, 57, 57)
                                                .addComponent(jTFTallaXSInput, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jTFTallaMInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jTFTallaLInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jTFTallaXLInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jTFTallaSInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                                .addGap(112, 112, 112))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTFPrecioCompraUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLPrecioCompraUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLTítuloNuevoProducto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLBuscador, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTFBuscador, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLFiltroBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCBFiltro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnConfirmarReposicion, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(65, 65, 65))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLTalla, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLTallaXS, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTFTallaXSInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTFTallaSInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLTallaS, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTFTallaMInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLTallaM, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLTallaL, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTFTallaLInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(16, 16, 16)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLTallaXL, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTFTallaXLInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(39, 39, 39)
                                .addComponent(jLPrecioCompraUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTFPrecioCompraUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLFiltroCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCBCategoria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        btnRegresar.setBorderPainted(false);
        btnRegresar.setContentAreaFilled(false);
        btnRegresar.setOpaque(false);
        btnRegresar.setUI(new javax.swing.plaf.basic.BasicButtonUI() {
            @Override
            public void paint(Graphics g, JComponent c) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                // Pinta un fondo redondeado
                g2.setColor(c.getBackground());
                g2.fillRoundRect(0, 0, c.getWidth(), c.getHeight(), 20, 20);
                super.paint(g2, c);
                g2.dispose();
            }
        });
        btnRegresar.setBorderPainted(false);
        btnRegresar.setContentAreaFilled(false);
        btnRegresar.setOpaque(false);
        btnRegresar.setUI(new javax.swing.plaf.basic.BasicButtonUI() {
            @Override
            public void paint(Graphics g, JComponent c) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                // Pinta un fondo redondeado
                g2.setColor(c.getBackground());
                g2.fillRoundRect(0, 0, c.getWidth(), c.getHeight(), 10, 10);
                super.paint(g2, c);
                g2.dispose();
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        
        if(jLFiltroCategoria.isVisible())
            jLFiltroCategoria.setVisible(false);

        if(jCBCategoria.isVisible())
            jCBCategoria.setVisible(false);

        if(jLBuscador.isVisible())
            jLBuscador.setVisible(false);

        if(jTFBuscador.isVisible())
            jTFBuscador.setVisible(false);

        modeloTablaProductos.setRowCount(0);
        mostrarTallas(false);
        
        ControlFlujo.mostrarSubmenuCompras();
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void btnConfirmarReposicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarReposicionActionPerformed
        ProductoDTO producto = productosEncontrados.get(jTProductos.getSelectedRow());
        
        List<DetalleCompraTallaDTO> tallasCompradas = new ArrayList<>();
        if(XSValido){
            DetalleCompraTallaDTO tallaXS = new DetalleCompraTallaDTO();
            tallaXS.setCantidadComprada(Integer.valueOf(jTFTallaXSInput.getText()));
            tallaXS.setTalla(new TallaDTO("XS"));
            tallasCompradas.add(tallaXS);
        }
        
        if(SValido){
            DetalleCompraTallaDTO tallaS = new DetalleCompraTallaDTO();
            tallaS.setCantidadComprada(Integer.valueOf(jTFTallaSInput.getText()));
            tallaS.setTalla(new TallaDTO("S"));
            tallasCompradas.add(tallaS);
        }
        
        if(MValido){
            DetalleCompraTallaDTO tallaM = new DetalleCompraTallaDTO();
            tallaM.setCantidadComprada(Integer.valueOf(jTFTallaMInput.getText()));
            tallaM.setTalla(new TallaDTO("M"));
            tallasCompradas.add(tallaM);
        }
        
        if(LValido){
            DetalleCompraTallaDTO tallaL = new DetalleCompraTallaDTO();
            tallaL.setCantidadComprada(Integer.valueOf(jTFTallaLInput.getText()));
            tallaL.setTalla(new TallaDTO("L"));
            tallasCompradas.add(tallaL);
        }
        
        if(XLValido){
            DetalleCompraTallaDTO tallaXL = new DetalleCompraTallaDTO();
            tallaXL.setCantidadComprada(Integer.valueOf(jTFTallaXLInput.getText()));
            tallaXL.setTalla(new TallaDTO("XL"));
            tallasCompradas.add(tallaXL);
        }
        
        ReposicionDTO reposicion = new ReposicionDTO();
        reposicion.setPrecioCompraUnitario(Double.valueOf(jTFPrecioCompraUnitario.getText()));
        
        try {
            
            ControlOperaciones.registrarCompraReposicion(producto, reposicion, tallasCompradas);
            
            jCBFiltro.setSelectedItem("N/A");
            
            JOptionPane.showMessageDialog(this, "¡Producto repuesto con éxito!", "¡Reposición exitosa!", JOptionPane.PLAIN_MESSAGE);
            
        } catch (NegocioException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnConfirmarReposicionActionPerformed

    private void jCBFiltroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBFiltroItemStateChanged
        if(ControlOperaciones.validarCampoInvalidoComboBox(jCBFiltro)){
            if(jCBFiltro.getSelectedItem().equals("Nombre")){
                filtrarBuscador("Nombre del producto");
                ControlOperaciones.limiteCaracteres(jTFBuscador, 100);
                activarBuscador();
                btnConfirmarReposicion.setVisible(false);
                
            } else if(jCBFiltro.getSelectedItem().equals("Tipo")){
                filtrarBuscador("Tipo de producto");
                ControlOperaciones.limiteCaracteres(jTFBuscador, 50);
                activarBuscador();
                btnConfirmarReposicion.setVisible(false);
                
            }else if(jCBFiltro.getSelectedItem().equals("Color")){
                filtrarBuscador("Color del producto");
                ControlOperaciones.limiteCaracteres(jTFBuscador, 50);
                activarBuscador();
                btnConfirmarReposicion.setVisible(false);
                
            }else if(jCBFiltro.getSelectedItem().equals("Talla")){
                filtrarBuscador("Talla de producto");
                ControlOperaciones.limiteCaracteres(jTFBuscador, 5);
                activarBuscador();
                btnConfirmarReposicion.setVisible(false);
                
            } else if(jCBFiltro.getSelectedItem().equals("Categoría")){
                if(jLBuscador.isVisible())
                    jLBuscador.setVisible(false);
                
                if(jTFBuscador.isVisible())
                    jTFBuscador.setVisible(false);
                
                if(!jLFiltroCategoria.isVisible())
                    jLFiltroCategoria.setVisible(true);

                if(!jCBCategoria.isVisible())
                    jCBCategoria.setVisible(true);
                
                jCBCategoria.setSelectedItem("N/A");
                modeloTablaProductos.setRowCount(0);
                mostrarTallas(false);
                btnConfirmarReposicion.setVisible(false);
            }
        } else{
            if(jLFiltroCategoria.isVisible())
                jLFiltroCategoria.setVisible(false);

            if(jCBCategoria.isVisible())
                jCBCategoria.setVisible(false);

            if(jLBuscador.isVisible())
                jLBuscador.setVisible(false);

            if(jTFBuscador.isVisible())
                jTFBuscador.setVisible(false);
            
            modeloTablaProductos.setRowCount(0);
            mostrarTallas(false);
            btnConfirmarReposicion.setVisible(false);
        }
    }//GEN-LAST:event_jCBFiltroItemStateChanged

    private void jCBCategoriaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBCategoriaItemStateChanged
        filtroValido = ControlOperaciones.validarCampoInvalidoComboBox(jCBFiltro);
        categoriaValida = ControlOperaciones.validarCampoInvalidoComboBox(jCBCategoria);
        if(filtroValido && categoriaValida){
            try {
                modeloTablaProductos.setRowCount(0);
                productosEncontrados = ControlOperaciones.buscarPorCategoria((String) jCBCategoria.getSelectedItem());
                cargarTablaProductos();
            } catch (NegocioException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jCBCategoriaItemStateChanged

    private void jTProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTProductosMouseClicked
        
        if(ControlOperaciones.validarCampoInvalidoComboBox(jCBFiltro) && jTProductos.getSelectedRow() != -1){
            mostrarTallas(true);
        }        
    }//GEN-LAST:event_jTProductosMouseClicked

    private void activarBuscador(){
        jTFBuscador.getDocument().addDocumentListener( new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                try {
                    tablaDinamica();
                } catch (NegocioException ex) {
                    JOptionPane.showMessageDialog(Reposicion.getInstance(), ex.getMessage(), "Error de búsqueda", JOptionPane.ERROR_MESSAGE);
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                try {
                    tablaDinamica();
                } catch (NegocioException ex) {
                    JOptionPane.showMessageDialog(Reposicion.getInstance(), ex.getMessage(), "Error de búsqueda", JOptionPane.ERROR_MESSAGE);
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                try {
                    tablaDinamica();
                } catch (NegocioException ex) {
                    JOptionPane.showMessageDialog(Reposicion.getInstance(), ex.getMessage(), "Error de búsqueda", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }
    
    private void activarBotonConfirmarReposicion(JTextField talla){
        talla.getDocument().addDocumentListener( new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                activarBoton();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                activarBoton();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                activarBoton();
            }
        });
    }
    
    private void tablaDinamica() throws NegocioException{
        campoValido = ControlOperaciones.validarCampoInvalidoTexto(jTFBuscador);
        filtroValido = ControlOperaciones.validarCampoInvalidoComboBox(jCBFiltro);
        
        if(campoValido && filtroValido){
            modeloTablaProductos.setRowCount(0);
            if(jCBFiltro.getSelectedItem().equals("Nombre")){
                productosEncontrados = ControlOperaciones.buscarProductosPorNombre(jTFBuscador.getText());
                cargarTablaProductos();
                
            } else if(jCBFiltro.getSelectedItem().equals("Tipo")){
                productosEncontrados = ControlOperaciones.buscarPorTipo(jTFBuscador.getText());
                cargarTablaProductos();
                
            }else if(jCBFiltro.getSelectedItem().equals("Color")){
                productosEncontrados = ControlOperaciones.buscarPorColor(jTFBuscador.getText());
                cargarTablaProductos();
                
            }else if(jCBFiltro.getSelectedItem().equals("Talla")){
                productosEncontrados = ControlOperaciones.buscarPorTalla(jTFBuscador.getText());
                cargarTablaProductos();
                
            }
        }
    }
    
    private void cargarTablaProductos(){
        if(!productosEncontrados.isEmpty()){
            productosEncontrados.stream().forEach(e -> {
            modeloTablaProductos.addRow(new Object[]{
                    e.getNombre(), 
                    e.getTipo().getTipo(),
                    e.getCategoria().getCategoria(),
                    e.getColor().getColor(),
                    e.getPrecio()
                });
            });
        }
        mostrarTallas(false);
    }
    
    private void activarBoton(){
        campoValido = ControlOperaciones.validarCampoInvalidoTexto(jTFBuscador);
        filtroValido = ControlOperaciones.validarCampoInvalidoComboBox(jCBFiltro);
        if(jTProductos.getSelectedRow() != -1 && campoValido && filtroValido){
            XSValido = ControlOperaciones.validarCampoInvalidoCantidades(jTFTallaXSInput);
            SValido = ControlOperaciones.validarCampoInvalidoCantidades(jTFTallaSInput);
            MValido = ControlOperaciones.validarCampoInvalidoCantidades(jTFTallaMInput);
            LValido = ControlOperaciones.validarCampoInvalidoCantidades(jTFTallaLInput);
            XLValido = ControlOperaciones.validarCampoInvalidoCantidades(jTFTallaXLInput);
            precioUnitarioValido = ControlOperaciones.validarCampoInvalidoPrecios(jTFPrecioCompraUnitario);
            
            btnConfirmarReposicion.setVisible((XSValido || SValido || MValido || LValido || XLValido) && precioUnitarioValido);
        }
            
    }
    
    private void mostrarTallas(boolean mostrar){
        jLCantidad.setVisible(mostrar);
        jLTalla.setVisible(mostrar);
        jLTallaXS.setVisible(mostrar);
        jLTallaS.setVisible(mostrar);
        jLTallaM.setVisible(mostrar);
        jLTallaL.setVisible(mostrar);
        jLTallaXL.setVisible(mostrar);

        jTFTallaXSInput.setVisible(mostrar);
        jTFTallaXSInput.setText("0");
        
        jTFTallaSInput.setVisible(mostrar);
        jTFTallaSInput.setText("0");
        
        jTFTallaMInput.setVisible(mostrar);
        jTFTallaMInput.setText("0");
        
        jTFTallaLInput.setVisible(mostrar);
        jTFTallaLInput.setText("0");
        
        jTFTallaXLInput.setVisible(mostrar);
        jTFTallaXLInput.setText("0");
        
        jLPrecioCompraUnitario.setVisible(mostrar);
        jTFPrecioCompraUnitario.setVisible(mostrar);
        jTFPrecioCompraUnitario.setText("0");
    }
    
    private void filtrarBuscador(String nuevoTítulo){
        if(jLFiltroCategoria.isVisible())
            jLFiltroCategoria.setVisible(false);
        
        if(jCBCategoria.isVisible())
            jCBCategoria.setVisible(false);
        
        if(!jLBuscador.isVisible())
            jLBuscador.setVisible(true);
        
        if(!jTFBuscador.isVisible())
            jTFBuscador.setVisible(true);
        
        jLBuscador.setText(nuevoTítulo);
        jTFBuscador.setText("");
        jTFPrecioCompraUnitario.setText("0");
        modeloTablaProductos.setRowCount(0);
        mostrarTallas(false);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirmarReposicion;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JComboBox<String> jCBCategoria;
    private javax.swing.JComboBox<String> jCBFiltro;
    private javax.swing.JLabel jLBuscador;
    private javax.swing.JLabel jLCantidad;
    private javax.swing.JLabel jLFiltroBusqueda;
    private javax.swing.JLabel jLFiltroCategoria;
    private javax.swing.JLabel jLPrecioCompraUnitario;
    private javax.swing.JLabel jLTalla;
    private javax.swing.JLabel jLTallaL;
    private javax.swing.JLabel jLTallaM;
    private javax.swing.JLabel jLTallaS;
    private javax.swing.JLabel jLTallaXL;
    private javax.swing.JLabel jLTallaXS;
    private javax.swing.JLabel jLTítuloNuevoProducto;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTFBuscador;
    private javax.swing.JTextField jTFPrecioCompraUnitario;
    private javax.swing.JTextField jTFTallaLInput;
    private javax.swing.JTextField jTFTallaMInput;
    private javax.swing.JTextField jTFTallaSInput;
    private javax.swing.JTextField jTFTallaXLInput;
    private javax.swing.JTextField jTFTallaXSInput;
    private javax.swing.JTable jTProductos;
    // End of variables declaration//GEN-END:variables
}